{"version":3,"file":"YouTube.js","sources":["webpack:///./themes/mcg/assets/src/js/main/video/Video.ts","webpack:///./themes/mcg/assets/src/js/main/video/types/YouTube.ts"],"sourcesContent":["import { get } from \"@/utils\";\nimport { observe } from \"../../utils/observer\";\nimport type { VimeoPlayer } from \"./types/Vimeo\";\nimport type { YtPlayer } from \"./types/YouTube\";\n\ntype VideoPlayer = VimeoPlayer | YtPlayer;\n\ntype Task = \"play\" | \"pause\";\n\n/**\n * This is video base class.\n */\nabstract class Video {\n    element: HTMLElement;\n    container: HTMLElement;\n    id: string;\n    isPlaying: boolean;\n    isReady: boolean;\n    queue: Set<Task>;\n    abstract player: VideoPlayer;\n    playPromise?: Promise<any>;\n\n    constructor(element: HTMLElement) {\n        this.element = element;\n        this.container = get(\".js-video-container\", element)!;\n        this.id = element.getAttribute(\"data-id\") || \"\";\n        this.isPlaying = false;\n        this.isReady = false;\n        this.queue = new Set();\n\n        this.createPlayer();\n\n        this._observeElement();\n        element.dispatchEvent(new CustomEvent(\"videoloaded\"));\n    }\n\n    abstract createPlayer(): void;\n    abstract playVideo(): void;\n    abstract pauseVideo(): void;\n\n    play() {\n        if (this.isPlaying) return;\n        if (!this.isReady) {\n            this.createPlayer();\n            this._queueTask(\"play\");\n            return;\n        }\n\n        this.playPromise = Promise.resolve(this.playVideo());\n    }\n\n    async pause() {\n        if (!this.isPlaying) return;\n        if (!this.isReady || typeof this.playPromise === \"undefined\") {\n            this._queueTask(\"pause\");\n            return;\n        }\n\n        await this.playPromise;\n        this.pauseVideo();\n        this.onStop();\n    }\n\n    onEnded() {\n        this.onStop();\n    }\n\n    onPlay() {\n        this.element.setAttribute(\"data-status\", \"loaded playing\");\n        this.isPlaying = true;\n    }\n\n    onStop() {\n        this.element.setAttribute(\"data-status\", \"loaded paused\");\n        this.isPlaying = false;\n    }\n\n    watchResize(videoWidth: number, videoHeight: number) {\n        const aspectRatio = videoHeight / videoWidth;\n\n        const updateSize = () => {\n            const containerWidth = this.element.clientWidth;\n            this.container!.style.width = `${containerWidth}px`;\n            this.container!.style.height = `${containerWidth * aspectRatio}px`;\n        };\n\n        updateSize();\n        this.element.dispatchEvent(new CustomEvent(\"videosize\"));\n        window.dispatchEvent(new CustomEvent(\"resize\"));\n        window.addEventListener(\"resize\", () => updateSize());\n\n        this.player.element!.setAttribute(\"tabindex\", \"-1\");\n    }\n\n    flushQueue() {\n        this.queue.forEach((command) => this[command]());\n        this.queue.clear();\n    }\n\n    private _queueTask(command: Task) {\n        this.queue.add(command);\n    }\n\n    private _observeElement() {\n        observe(\n            this.container,\n            (inView) => {\n                if (inView) {\n                    this.play();\n                } else if (this.isReady) {\n                    this.pause();\n                }\n            },\n            {\n                threshold: 0.25,\n                rootMargin: \"-50px\",\n            }\n        );\n    }\n}\n\nexport default Video;\n","import { addPrefetch } from \"@/utils\";\nimport Video from \"../Video\";\n\n// https://developers.google.com/youtube/player_parameters#release_notes_08_23_2018\n\nexport interface YtPlayer extends YT.Player {\n    element?: HTMLIFrameElement;\n}\n\ntype StateChangeMap = Record<number, () => void>;\n\nclass YTVideo extends Video {\n    player!: YtPlayer;\n    static preconnected?: boolean;\n    stateChange: StateChangeMap = {\n        /**\n         * -1 - Unstarted\n         *  0 - Ended\n         *  1 - Playing\n         *  2 = Paused\n         *  3 - Buffering\n         *  5 - Cued\n         */\n        0: () => this.onEnded(),\n        1: () => this.onPlay(),\n        2: () => this.pause(),\n    };\n\n    createPlayer() {\n        if (this.player) return;\n        YTVideo._warmConnections();\n\n        const { Player: YoutubePlayer } = window.YT || {};\n        if (!YoutubePlayer) {\n            this._loadYT();\n            return;\n        }\n\n        this.container.innerHTML = \"<div></div>\";\n        this.player = new YoutubePlayer(this.container.firstElementChild as HTMLElement, {\n            videoId: this.id,\n            playerVars: {\n                autoplay: 1,\n                controls: 0,\n                loop: 1,\n                modestbranding: 1,\n                playlist: this.id,\n                playsinline: 1,\n                rel: 0,\n                color: \"white\",\n            },\n            events: {\n                onReady: () => this._onReady(),\n                onStateChange: ({ data }) => {\n                    if (this.stateChange[data]) {\n                        this.stateChange[data]();\n                    }\n                },\n            },\n        });\n\n        this.player.element = this.player.getIframe();\n    }\n\n    playVideo() {\n        this.player.playVideo();\n    }\n\n    pauseVideo() {\n        this.player.pauseVideo();\n    }\n\n    private _onReady() {\n        this.isReady = true;\n        this.player.mute();\n\n        const { width, height } = this.player.element!;\n        this.watchResize(+width, +height);\n\n        \"requestIdleCallback\" in window\n            ? // @ts-ignore\n              requestIdleCallback(() => this.flushQueue())\n            : this.flushQueue();\n    }\n\n    private _loadYT() {\n        const script = document.createElement(\"script\");\n        script.src = \"https://www.youtube.com/player_api\";\n        script.async = true;\n        window.onYouTubeIframeAPIReady = () => this.createPlayer();\n        document.body.appendChild(script);\n    }\n\n    private static _warmConnections() {\n        if (YTVideo.preconnected) return;\n\n        // The iframe document and most of its subresources come right off youtube.com\n        addPrefetch(\"preconnect\", \"https://www.youtube-nocookie.com\");\n        // The botguard script is fetched off from google.com\n        addPrefetch(\"preconnect\", \"https://www.google.com\");\n\n        // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\n        addPrefetch(\"preconnect\", \"https://googleads.g.doubleclick.net\");\n        addPrefetch(\"preconnect\", \"https://static.doubleclick.net\");\n\n        YTVideo.preconnected = true;\n    }\n}\n\nexport default YTVideo;\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AAOA;AACA;AACA;AACA;AAUA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AA3GA;AACA;AA4GA;;;;;;;;;;;;;;;;;ACzHA;AACA;AACA;AASA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAHA;AACA;AAgBA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAUA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AANA;AAZA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAhGA;AACA;AADA;AACA;AAiGA;;;;A","sourceRoot":""}