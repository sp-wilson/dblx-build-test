{"version":3,"file":"HTML5.js","sources":["webpack:///./themes/mcg/assets/src/js/main/video/Video.ts","webpack:///./themes/mcg/assets/src/js/main/video/types/HTML5.ts"],"sourcesContent":["import { get } from \"@/utils\";\nimport { observe } from \"../../utils/observer\";\nimport type { VimeoPlayer } from \"./types/Vimeo\";\nimport type { YtPlayer } from \"./types/YouTube\";\n\ntype VideoPlayer = VimeoPlayer | YtPlayer;\n\ntype Task = \"play\" | \"pause\";\n\n/**\n * This is video base class.\n */\nabstract class Video {\n    element: HTMLElement;\n    container: HTMLElement;\n    id: string;\n    isPlaying: boolean;\n    isReady: boolean;\n    queue: Set<Task>;\n    abstract player: VideoPlayer;\n    playPromise?: Promise<any>;\n\n    constructor(element: HTMLElement) {\n        this.element = element;\n        this.container = get(\".js-video-container\", element)!;\n        this.id = element.getAttribute(\"data-id\") || \"\";\n        this.isPlaying = false;\n        this.isReady = false;\n        this.queue = new Set();\n\n        this.createPlayer();\n\n        this._observeElement();\n        element.dispatchEvent(new CustomEvent(\"videoloaded\"));\n    }\n\n    abstract createPlayer(): void;\n    abstract playVideo(): void;\n    abstract pauseVideo(): void;\n\n    play() {\n        if (this.isPlaying) return;\n        if (!this.isReady) {\n            this.createPlayer();\n            this._queueTask(\"play\");\n            return;\n        }\n\n        this.playPromise = Promise.resolve(this.playVideo());\n    }\n\n    async pause() {\n        if (!this.isPlaying) return;\n        if (!this.isReady || typeof this.playPromise === \"undefined\") {\n            this._queueTask(\"pause\");\n            return;\n        }\n\n        await this.playPromise;\n        this.pauseVideo();\n        this.onStop();\n    }\n\n    onEnded() {\n        this.onStop();\n    }\n\n    onPlay() {\n        this.element.setAttribute(\"data-status\", \"loaded playing\");\n        this.isPlaying = true;\n    }\n\n    onStop() {\n        this.element.setAttribute(\"data-status\", \"loaded paused\");\n        this.isPlaying = false;\n    }\n\n    watchResize(videoWidth: number, videoHeight: number) {\n        const aspectRatio = videoHeight / videoWidth;\n\n        const updateSize = () => {\n            const containerWidth = this.element.clientWidth;\n            this.container!.style.width = `${containerWidth}px`;\n            this.container!.style.height = `${containerWidth * aspectRatio}px`;\n        };\n\n        updateSize();\n        this.element.dispatchEvent(new CustomEvent(\"videosize\"));\n        window.dispatchEvent(new CustomEvent(\"resize\"));\n        window.addEventListener(\"resize\", () => updateSize());\n\n        this.player.element!.setAttribute(\"tabindex\", \"-1\");\n    }\n\n    flushQueue() {\n        this.queue.forEach((command) => this[command]());\n        this.queue.clear();\n    }\n\n    private _queueTask(command: Task) {\n        this.queue.add(command);\n    }\n\n    private _observeElement() {\n        observe(\n            this.container,\n            (inView) => {\n                if (inView) {\n                    this.play();\n                } else if (this.isReady) {\n                    this.pause();\n                }\n            },\n            {\n                threshold: 0.25,\n                rootMargin: \"-50px\",\n            }\n        );\n    }\n}\n\nexport default Video;\n","/* eslint-disable camelcase */\nimport Video from \"../Video\";\n\ntype Source = {\n    format: string; // \"mp4\",\n    height: number;\n    mime_type: string; // \"video/mp4\",\n    url: string;\n    width: number;\n};\n\nclass HTML5Video extends Video {\n    // @ts-expect-error\n    player!: HTMLVideoElement;\n\n    createPlayer() {\n        if (this.player) return;\n        const { sources }: { sources: Source[] } = JSON.parse(\n            this.container.getAttribute(\"data-sources\")!\n        );\n\n        this.container.innerHTML = `\n            <video muted playsinline autoplay loop>\n                ${sources.reduce((acc, curr) => {\n                    // eslint-disable-next-line no-param-reassign\n                    acc += `<source src=\"${curr.url}\" type=\"${curr.mime_type}\" width=\"${curr.width}\" height=\"${curr.height}\">`;\n                    return acc;\n                }, \"\")}\n            </video>\n        `;\n        // @ts-expect-error\n        this.player = this.container.firstElementChild;\n        // @ts-expect-error\n        this.player.element = this.container.firstElementChild;\n\n        this.player.addEventListener(\"canplay\", () => this._onReady());\n        this.player.addEventListener(\"ended\", () => this.onEnded());\n        this.player.addEventListener(\"play\", () => this.onPlay());\n        this.player.addEventListener(\"pause\", () => this.pause());\n    }\n\n    playVideo() {\n        this.player.play();\n    }\n\n    pauseVideo() {\n        this.player.pause();\n    }\n\n    _onReady() {\n        this.isReady = true;\n\n        const { videoWidth, videoHeight } = this.player;\n        this.watchResize(videoWidth, videoHeight);\n\n        \"requestIdleCallback\" in window\n            ? // @ts-ignore\n              requestIdleCallback(() => this.flushQueue())\n            : this.flushQueue();\n    }\n}\n\nexport default HTML5Video;\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AAOA;AACA;AACA;AACA;AAUA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAKA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAFA;AAKA;AACA;AA3GA;AACA;AA4GA;;;;;;;;;;;;;;;;;ACzHA;AACA;AACA;AASA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;AAjDA;AACA;AAkDA;;;;A","sourceRoot":""}